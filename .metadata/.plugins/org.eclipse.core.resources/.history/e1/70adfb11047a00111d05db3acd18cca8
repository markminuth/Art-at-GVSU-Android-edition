package edu.artAtGVSU;

import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import com.google.android.maps.GeoPoint;
import com.google.android.maps.MapActivity;
import com.google.android.maps.MapController;
import com.google.android.maps.MapView;
import com.google.android.maps.Overlay;
import com.google.android.maps.OverlayItem;

import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Gallery;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;

public class MapTourActivity extends MapActivity {

	MapView map;
	MapController controller;
	ArrayList<Bitmap> images;
	int selectedPos;
	
	/*
	 * Get tour image from URL
	 */
	public Bitmap fetchImage(String tImageURL) {
		URL url;
		Bitmap img;
		try {
			url = new URL(tImageURL);

			HttpURLConnection connection = (HttpURLConnection) url
					.openConnection();
			connection.setDoInput(true);
			connection.connect();
			InputStream is = connection.getInputStream();
			img = BitmapFactory.decodeStream(is);
			return img;

		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// returns this icon if URL doesn't retrieve artwork
		img = ((BitmapDrawable) getResources().getDrawable(R.drawable.ic_launcher))
				.getBitmap();
		return img;
	}
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

		map = (MapView) findViewById(R.id.mapView);
		map.displayZoomControls(true);
		map.setBuiltInZoomControls(true);
		
		List<Overlay> mapOverlays = map.getOverlays();
		Drawable drawable = this.getResources().getDrawable(R.drawable.pin);
		TourPinpoints itemizedoverlay = new TourPinpoints(drawable, map);

		int selectedTour = getIntent().getIntExtra("tourID", -1) + 1;
		final Tour t = ParseToursXML.getTour(String.valueOf(selectedTour));
		
		 //Get Extra Information for each artwork in tour including image URL
				images = new ArrayList<Bitmap>();
				ParseArtWorkXML.setTour(t);
				for (int i = 0; i < t.artPieces.size(); i++) {
					// if the artwork has not yet been set to tours
					if (ParseArtWorkXML.getTour().artPieces.get(i).imageURL == null) {
						ParseArtWorkXML.artWorkRequestID(t.artPieces.get(i).artID, i);
						images.add(fetchImage(t.artPieces.get(i).getImageURL()));
					} else {
						images.add(fetchImage(ParseArtWorkXML.getTour().artPieces
								.get(i).getImageURL()));
					}
				}
				Gallery gallery = (Gallery) findViewById(R.id.gallery);
				gallery.setAdapter(new ImageAdapterMapsGallery(this, images));

				gallery.setOnItemSelectedListener(new OnItemSelectedListener() {
					public void onItemSelected(AdapterView parent, View view,
							int position, long id) {
						selectedPos = position;
					}

					public void onNothingSelected(AdapterView arg0) {
						// TODO Auto-generated method stub
					}
				});

				gallery.setOnItemClickListener(new OnItemClickListener() {
					public void onItemClick(AdapterView parent, View view,
							int position, long id) {
						if (position == selectedPos) {
					        //Intent intent = new Intent(view.getContext(), ArtWorkDetailsActivity.class);
					    	//startActivityForResult(intent, 0);
						}
						
						Toast.makeText(MapTourActivity.this, "TEST" ,Toast.LENGTH_SHORT).show();
					}
				});
				for (int i = 0; i < t.artPieces.size(); i++) {
					GeoPoint gp = t.artPieces.get(i).geoLoc;
					OverlayItem overlayItem = new OverlayItem(gp, t.artPieces.get(i).artTitle, t.artPieces.get(i).artistName);
					itemizedoverlay.createPinPoint(overlayItem);
				}

				mapOverlays.add(itemizedoverlay);
				controller = map.getController();

				// Focus Screen to correct location based on the tour
				if (selectedTour == 1) {

					controller.animateTo(t.artPieces.get(1).geoLoc);
					controller.setZoom(17);
				} else if (selectedTour == 2) {

					controller.animateTo(t.artPieces.get(1).geoLoc);
					controller.setZoom(17);
				} else {

					controller.animateTo(t.artPieces.get(1).geoLoc);
					controller.setZoom(14);
				}
	}

	@Override
	protected boolean isRouteDisplayed() {
		// TODO Auto-generated method stub
		return false;
	}

}
